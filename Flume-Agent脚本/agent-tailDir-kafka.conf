# 声明并且配置Source
a1.sources=r1
a1.sources.r1.type = TAILDIR
a1.sources.r1.positionFile = /opt/project/data-ware-house/log_position.json
a1.sources.r1.filegroups = f1
a1.sources.r1.filegroups.f1 = /opt/project/data-ware-house/data/app.+
a1.sources.r1.fileHeader = true

# Resource关联自定义的拦截器(注意顺序)
a1.sources.r1.interceptors =  i1 i2
a1.sources.r1.interceptors.i1.type = com.yxBuild.interceptor.LogETLInterceptor$Builder
a1.sources.r1.interceptors.i2.type = com.yxBuild.interceptor.LogTypeInterceptor$Builder

# 配置Source关联Channel选择器
a1.sources.r1.selector.type = multiplexing
a1.sources.r1.selector.header = topic
a1.sources.r1.selector.mapping.topic_start = c1
a1.sources.r1.selector.mapping.topic_event = c2

# 声明并且配置Channel
a1.channels=c1 c2
a1.channels.c1.type = org.apache.flume.channel.kafka.KafkaChannel
a1.channels.c1.kafka.bootstrap.servers = hadoop103:9092,hadoop104:9092,hadoop105:9092
a1.channels.c1.kafka.topic = topic_start
a1.channels.c1.parseAsFlumeEvent = false
a1.channels.c1.kafka.consumer.group.id = flume-consumer

a1.channels.c2.type = org.apache.flume.channel.kafka.KafkaChannel
a1.channels.c2.kafka.bootstrap.servers = hadoop103:9092,hadoop104:9092,hadoop105:9092
a1.channels.c2.kafka.topic = topic_event
a1.channels.c2.parseAsFlumeEvent = false
a1.channels.c2.kafka.consumer.group.id = flume-consumer

# Source关联Channel
a1.sources.r1.channels = c1 c2
